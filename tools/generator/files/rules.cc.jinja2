// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2012-2020 Association Prologin <association@prologin.org>

#include "rules.hh"

#include <memory>
#include <utility>

#include "actions.hh"

Rules::Rules(const rules::Options opt)
    : {% if yaml.rules_type == 'turnbased' %}TurnBasedRules(opt)
    , {% elif yaml.rules_type == 'synchronous' %}SynchronousRules(opt)
    , {% endif %}sandbox_(opt.time)
{
    if (!opt.champion_lib.empty())
    {
        champion_dll_ = std::make_unique<utils::DLL>(opt.champion_lib);

        // FIXME: register user functions
    }

    auto game_state = std::make_unique<GameState>(opt.players);
    api_ = std::make_unique<Api>(std::move(game_state), opt.player);
    register_actions();
}

void Rules::register_actions()
{
    {%- for func in yaml.function %}
        {%- if func.fct_action %}
    api_->actions()->register_action(ID_ACTION_{{ func.fct_name|upper }},
                                     [] { return new Action{{ func.fct_name|snake_to_camel_case }}; });
        {%- endif %}
    {%- endfor %}
}

{% if not yaml.rules_type -%}
void Rules::player_loop(rules::ClientMessenger_sptr msgr)
{
    // FIXME
}

void Rules::spectator_loop(rules::ClientMessenger_sptr msgr)
{
    // FIXME
}

void Rules::server_loop(rules::ServerMessenger_sptr msgr)
{
    // FIXME
}
{% else -%}
rules::Actions* Rules::get_actions()
{
    return api_->actions();
}

void Rules::apply_action(const rules::IAction_sptr& action)
{
    // When receiving an action, the API should have already checked that it
    // is valid. We recheck that for the current gamestate here to avoid weird
    // client/server desynchronizations and make sure the gamestate is always
    // consistent across the clients and the server.

    int err = api_->game_state_check(action);
    if (err)
        FATAL("Synchronization error: received action %d from player %d, but "
              "check() on current gamestate returned %d.",
              action->id(), action->player_id(), err);
    api_->game_state_apply(action);
}

bool Rules::is_finished()
{
    // FIXME
    return true;
}
{% endif %}
