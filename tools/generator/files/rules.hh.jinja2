// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2012-2020 Association Prologin <association@prologin.org>

#pragma once

#include <memory>

#include <rules/actions.hh>
#include <rules/client-messenger.hh>
#include <rules/options.hh>
#include <rules/player.hh>
#include <rules/rules.hh>
#include <rules/server-messenger.hh>
#include <utils/dll.hh>
#include <utils/sandbox.hh>

#include "api.hh"

class Rules
{%- if yaml.rules_type == 'turnbased' %} : public rules::TurnBasedRules
{%- elif yaml.rules_type == 'synchronous' %} : public rules::SynchronousRules
{%- endif %}
{
public:
    explicit Rules(const rules::Options opt);
    virtual ~Rules() {}
{% if yaml.rules_type %}
    rules::Actions* get_actions() override;
    void apply_action(const rules::IAction_sptr& action) override;
    bool is_finished() override;

protected:
    // FIXME: Override {{ yaml.rules_type }} methods here
{%- else %}
    void player_loop(rules::ClientMessenger_sptr msgr) override;
    void spectator_loop(rules::ClientMessenger_sptr msgr) override;
    void server_loop(rules::ServerMessenger_sptr msgr) override;
{%- endif %}

private:
    void register_actions();

    std::unique_ptr<utils::DLL> champion_dll_;
    std::unique_ptr<Api> api_;
    utils::Sandbox sandbox_;
};

