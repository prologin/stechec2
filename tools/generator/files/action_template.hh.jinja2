// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2012-2020 Association Prologin <association@prologin.org>

#pragma once

#include <rules/action.hh>

#include "actions.hh"
#include "constant.hh"
#include "game_state.hh"

{% set args = action.fct_arg + [['player_id', 'int', '']] -%}
class Action{{ action.fct_name|camel_case }} : public rules::Action<GameState>
{
public:
    {%- set comma = joiner("    , ") %}
    Action{{ action.fct_name|camel_case }}({{ args|cxx_args }})
        : {% for arg_name, _, _ in args %}{{ comma() }}{{ arg_name }}_({{ arg_name }})
    {% endfor -%}
    {
    }
    Action{{ action.fct_name|camel_case }}() {} // for register_action()

    int check(const GameState& st) const override;
    void apply_on(GameState* st) const override;

    void handle_buffer(utils::Buffer& buf) override
    {
        {%- for arg_name, _, _ in args %}
        buf.handle({{ arg_name }}_);
        {%- endfor %}
    }

    uint32_t player_id() const override { return player_id_; };
    uint32_t id() const override { return ID_ACTION_{{ action.fct_name|upper }}; }

private:
    {%- for arg_name, arg_type, _ in args %}
    {{ arg_type }} {{ arg_name }}_;
    {%- endfor %}
};

