// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2020 Association Prologin <association@prologin.org>
{% import 'macros/cxx.jinja2' as cxx %}

// This file contains the code to call the API functions from the Python
// language.
// {{ stechec2_generated }}

#include <Python.h>
#include <vector>
#include <string>

static PyObject* py_module;
static PyObject* champ_module;

{% for enum in game.enum %}

{{ cxx.decl_enum(enum) }}
{% endfor %}
{% for struct in game.struct %}

{{ cxx.decl_struct(struct) }}
{% endfor %}

extern "C" {
{% for func in game.function %}

{{ func.fct_summary|cxx_comment(doc=True) }}
{{ func|cxx_prototype(prefix='api_') }};
{% endfor %}
}

template <typename PythonType, typename CxxType>
PythonType cxx_to_python(CxxType in)
{
    return in.__if_that_triggers_an_error_there_is_a_problem;
}

template <>
PyObject* cxx_to_python<PyObject*, int>(int in)
{
    return PyLong_FromLong(in);
}


template <>
PyObject* cxx_to_python<PyObject*, double>(double in)
{
    return PyFloat_FromDouble(in);
}


template <>
PyObject* cxx_to_python<PyObject*, std::string>(std::string in)
{
    return PyUnicode_FromString(in.c_str());
}


template <>
PyObject* cxx_to_python<PyObject*, bool>(bool in)
{
    return PyBool_FromLong(in);
}

template <typename CxxType>
PyObject* cxx_to_python_array(const std::vector<CxxType>& in)
{
    size_t size = in.size();
    PyObject* out = PyList_New(size);

    for (unsigned int i = 0; i < size; ++i)
        PyList_SET_ITEM(out, i, (cxx_to_python<PyObject*, CxxType>(in[i])));

    return out;
}

template <typename PythonType, typename CxxType>
CxxType python_to_cxx(PythonType in)
{
    return in.__if_that_triggers_an_error_there_is_a_problem;
}

template <>
int python_to_cxx<PyObject*, int>(PyObject* in)
{
    long out = PyLong_AsLong(in);
    if (PyErr_Occurred())
        throw 42;
    return out;
}

template <>
double python_to_cxx<PyObject*, double>(PyObject* in)
{
    double out = PyFloat_AsDouble(in);
    if (PyErr_Occurred())
        throw 42;
    return out;
}

template <>
bool python_to_cxx<PyObject*, bool>(PyObject* in)
{
    return static_cast<bool>(python_to_cxx<PyObject*, int>(in));
}

template <>
std::string python_to_cxx<PyObject*, std::string>(PyObject* in)
{
    const char* out = PyUnicode_AsUTF8(in);
    if (PyErr_Occurred())
        throw 42;
    return out;
}

template <typename CxxType>
std::vector<CxxType> python_to_cxx_array(PyObject* in)
{
    if (!PyList_Check(in))
    {
        PyErr_SetString(PyExc_TypeError, "a list is required");
        throw 42;
    }

    std::vector<CxxType> out;
    unsigned int size = PyList_Size(in);
    out.reserve(size);

    for (unsigned int i = 0; i < size; ++i)
        out.push_back(python_to_cxx<PyObject*, CxxType>(PyList_GET_ITEM(in, i)));

    return out;
}
{% for enum in game.enum %}

{{ enum.enum_summary|cxx_comment }}

template<>
PyObject* cxx_to_python<PyObject*, {{ enum.enum_name }}>({{ enum.enum_name }} in)
{
    PyObject* name = PyUnicode_FromString("{{ enum.enum_name }}");
    PyObject* enm = PyObject_GetAttr(py_module, name);
    Py_DECREF(name);
    if (enm == nullptr)
        throw 42;
    PyObject* arglist = Py_BuildValue("(i)", static_cast<int>(in));
    PyObject* ret = PyObject_CallObject(enm, arglist);
    Py_DECREF(enm);
    Py_DECREF(arglist);
    return ret;
}

template <>
{{ enum.enum_name }} python_to_cxx<PyObject*, {{ enum.enum_name }}>(PyObject* in)
{
    return static_cast<{{ enum.enum_name }}>(python_to_cxx<PyObject*, int>(in));
}
{% endfor %}
{% for struct in game.struct %}

{{ struct.str_summary|cxx_comment }}

template <>
PyObject* cxx_to_python<PyObject*, {{ struct.str_name }}>({{ struct.str_name }} in)
{
    PyObject* tuple = PyTuple_New({{ struct.str_field|length }});
    {% for field_name, field_type, field_comment in struct.str_field %}
    PyTuple_SET_ITEM(tuple, {{ loop.index0 }}, ({{ field_type|cxx_to_python }}(in.{{ field_name }})));
    {% endfor %}
    {% if struct.str_tuple %}
    return tuple;
    {% else %}
    PyObject* name = PyUnicode_FromString("{{ struct.str_name }}");
    PyObject* cstr = PyObject_GetAttr(py_module, name);
    Py_DECREF(name);
    if (cstr == nullptr)
        throw 42;
    PyObject* ret = PyObject_CallObject(cstr, tuple);
    Py_DECREF(cstr);
    Py_DECREF(tuple);
    if (ret == nullptr)
        throw 42;
    return ret;
    {% endif %}
}

template <>
{{ struct.str_name }} python_to_cxx<PyObject*, {{ struct.str_name }}>(PyObject* in)
{
    {{ struct.str_name }} out;
    PyObject* i;
    {% for field_name, field_type, field_comment in struct.str_field %}

    {{ field_comment|cxx_comment }}
        {% if struct.str_tuple %}
    i = PyTuple_GetItem(in, {{ loop.index0 }});
        {% else %}
    i = cxx_to_python<PyObject*, int>({{ loop.index0 }});
    i = PyObject_GetItem(in, i);
        {% endif %}
    if (i == nullptr)
        throw 42;
    out.{{ field_name }} = {{ field_type|python_to_cxx }}(i);
        {% if not struct.str_tuple %}
    Py_DECREF(i);
        {% endif %}
    {% endfor %}

    return out;
}
{% endfor %}

{% for func in game.function %}

// Python native wrapper for function {{ func.fct_name }}.
{{ func.fct_summary|cxx_comment }}
static PyObject* p_{{ func.fct_name }}(PyObject* /* self */, PyObject* args)
{
    {% for arg_name, _, _ in func.fct_arg %}
    PyObject* arg_{{ arg_name }};
    {% endfor %}
    if (!PyArg_ParseTuple(args, "{{ 'O' * (func.fct_arg|length) }}"
        {%- for arg_name, _, _ in func.fct_arg -%}
        , &arg_{{ arg_name }}
        {%- endfor %}))
    {
        return nullptr;
    }

    try {
        {%+ if func is returning %}return {{ func.fct_ret_type|cxx_to_python }}{% endif -%}
        (api_{{ func.fct_name }}(
        {%- set comma = joiner(', ') -%}
        {%- for arg_name, arg_type, _ in func.fct_arg -%}
        {{ comma() }}{{ arg_type|python_to_cxx }}(arg_{{ arg_name }})
        {%- endfor %}));
        {% if not func is returning %}
        Py_RETURN_NONE;
        {% endif %}
    } catch (...) {
        return nullptr;
    }
}
{% endfor %}

// API function to register.
static PyMethodDef api_callback[] = {
    {% for func in game.function %}
    {"{{ func.fct_name }}", p_{{ func.fct_name }}, METH_VARARGS, "{{ func.fct_name }}"},
    {% endfor %}
    {nullptr, nullptr, 0, nullptr}
};

// Initialize C module.
PyMODINIT_FUNC PyInit__api()
{
    static struct PyModuleDef apimoduledef = {
        PyModuleDef_HEAD_INIT,
        "_api",
        "API module",
        -1,
        api_callback,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
    };
    return PyModule_Create(&apimoduledef);
}

// Load a Python module.
static PyObject* _import_module(const char* m)
{
    PyObject* name = PyUnicode_FromString(m);
    PyObject* mod = PyImport_Import(name);
    Py_DECREF(name);
    if (mod == nullptr)
        if (PyErr_Occurred())
        {
            PyErr_Print();
            abort();
        }
    return mod;
}

// Initialize Python VM, register API functions, and load .py file.
static void _init_python()
{
    static wchar_t empty_string[] = L"";
    static wchar_t *argv[] = { (wchar_t *) &empty_string, nullptr };

    const char* champion_path;

    champion_path = getenv("CHAMPION_PATH");
    if (champion_path == nullptr)
        champion_path = ".";

    setenv("PYTHONPATH", champion_path, 1);

    static wchar_t program_name[] = L"stechec";
    Py_SetProgramName(program_name);

    PyImport_AppendInittab("_api", PyInit__api);
    Py_Initialize();
    PySys_SetArgvEx(1, argv, 0);

    // Import a Champion module with an uppercase letter to avoid conflict with
    // champion.so
    champ_module = _import_module("Champion");
    py_module = _import_module("api");
}

// Flush stdout and stderr
static void flush_std_files()
{
    PyObject *fout = PySys_GetObject("stdout");
    PyObject *ferr = PySys_GetObject("stderr");
    PyObject *tmp;

    if (fout != nullptr && fout != Py_None) {
        tmp = PyObject_CallMethod(fout, "flush", "");
        if (tmp == nullptr)
            PyErr_WriteUnraisable(fout);
        else
            Py_DECREF(tmp);
    }

    if (ferr != nullptr && ferr != Py_None) {
        tmp = PyObject_CallMethod(ferr, "flush", "");
        if (tmp == nullptr)
            PyErr_Clear();
        else
            Py_DECREF(tmp);
    }
}

// Run a Python function.
static PyObject* _call_python_function(const char* name)
{
    static bool initialized = false;

    if (!initialized)
    {
        initialized = true;
        _init_python();
    }

    PyObject *arglist, *func;
    PyObject *result = nullptr;

    func = PyObject_GetAttrString(champ_module, name);
    if (func && PyCallable_Check(func))
    {
        arglist = Py_BuildValue("()");
        result = PyEval_CallObject(func, arglist);
        Py_XDECREF(arglist);
        Py_DECREF(func);
    }
    if (result == nullptr && PyErr_Occurred())
    {
        PyErr_Print();
        abort();
    }

    flush_std_files();
    return result;
}


// Functions called from Stechec to Python.
{% for func in game.user_function %}

extern "C" {{ func|cxx_prototype }}
{
    PyObject* _retval = _call_python_function("{{ func.fct_name }}");
    try {
        {% if func is returning %}
        {{ func.fct_ret_type|cxx_type }} ret = {{ func.fct_ret_type|python_to_cxx }}(_retval);
        {% endif %}
        Py_XDECREF(_retval);
        {% if func is returning %}
        return ret;
        {% endif %}
    } catch (...) {
        PyErr_Print();
        abort();
    }
}
{% endfor %}
